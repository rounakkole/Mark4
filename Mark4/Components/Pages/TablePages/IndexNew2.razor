@page "/portfoliotable1sNew2"
@using Mark3.Data.Tables
@* @using Microsoft.AspNetCore.Components.QuickGrid *@
@inject IPortfolioService PortfolioService
@inject ILoginUserService LoginUserService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@* @inject NavigationManager NavigationManager *@
@attribute [StreamRendering(true)]
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@

<h3>IndexNew2</h3>

<AuthorizeView>
 <!-- @context.User.Identity?.Name -->
@if (PortfolioTable1s == null)
{
    <span>Loading...</span>
}
else if (PortfolioTable1s.Count == 0)
{
    <span>No records found.</span>
}
else
{
    <ul>
    @foreach (var PortfolioTable1 in PortfolioTable1s)
    {
            <li>@PortfolioTable1.UserId</li>
            <li>@PortfolioTable1.InstrumentId</li>
            <li>@PortfolioTable1.AveragePrice</li>
            <li>@PortfolioTable1.Quantity</li>
            <li>@PortfolioTable1.NewQuantity</li>
            <a href="@($"portfoliotable1s/edit?id={@PortfolioTable1.Id}")">Edit</a>
    }
    </ul>
        <!-- <p> <a href="portfoliotable1s/create">Create New</a> </p> -->
        <Portfoliotable1sCreateButton/>
}
</AuthorizeView>

@code {
    //youtu.be/w8imy7LT9zY
    public List<PortfolioTable1>? PortfolioTable1s = null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        //string? userName = authstate.User.Identity.Name;
        string? userName = LoginUserService.GetLoginUserAsync(authstate);
        await Task.Delay(2000); //ToDo: remove
        PortfolioTable1s = await PortfolioService.GetPortfolioTable1sAsync(userName);
    }
}
