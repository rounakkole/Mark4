@page "/portfoliotable1s/edit"
@using Microsoft.EntityFrameworkCore
@using Mark3.Data.Tables
@inject IDbContextFactory<Mark4.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>PortfolioTable1</h2>
<hr />
@if (PortfolioTable1 is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="PortfolioTable1" OnValidSubmit="UpdatePortfolioTable1" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="PortfolioTable1.Id" value="@PortfolioTable1.Id" />
                <input type="hidden" name="PortfolioTable1.UserId" value="@PortfolioTable1.UserId" />
                <input type="hidden" name="PortfolioTable1.CreatedDate" value="@PortfolioTable1.CreatedDate.ToLongDateString()" />
                <!-- <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputText id="userid" @bind-Value="PortfolioTable1.UserId" class="form-control" />
                    <ValidationMessage For="() => PortfolioTable1.UserId" class="text-danger" />
                </div> -->
                <div class="mb-3">
                    <label for="instrumentid" class="form-label">InstrumentId:</label>
                    <InputNumber id="instrumentid" @bind-Value="PortfolioTable1.InstrumentId" class="form-control" />
                    <ValidationMessage For="() => PortfolioTable1.InstrumentId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="averageprice" class="form-label">AveragePrice:</label>
                    <InputNumber id="averageprice" @bind-Value="PortfolioTable1.AveragePrice" class="form-control" />
                    <ValidationMessage For="() => PortfolioTable1.AveragePrice" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity:</label>
                    <InputNumber id="quantity" @bind-Value="PortfolioTable1.Quantity" class="form-control" />
                    <ValidationMessage For="() => PortfolioTable1.Quantity" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="newquantity" class="form-label">NewQuantity:</label>
                    <InputNumber id="newquantity" @bind-Value="PortfolioTable1.NewQuantity" class="form-control" />
                    <ValidationMessage For="() => PortfolioTable1.NewQuantity" class="text-danger" />
                </div>
                <!-- <div class="mb-3">
                    <label for="mojdifieddatetime" class="form-label">ModifiedDateTime:</label>
                    <InputDate id="modifieddatetime" @bind-Value="PortfolioTable1.ModifiedDateTime" class="form-control" />
                    <ValidationMessage For="() => PortfolioTable1.ModifiedDateTime" class="text-danger" />
                </div> -->
                <!-- <div class="mb-3">
                    <label for="createddate" class="form-label">CreatedDate:</label>
                    <InputDate id="createddate" @bind-Value="PortfolioTable1.CreatedDate" class="form-control" />
                    <ValidationMessage For="() => PortfolioTable1.CreatedDate" class="text-danger" />
                </div> -->
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
        <div>
            <dl class="row">
                <dt class="col-sm-2">ModifiedDateTime</dt>
                <dd class="col-sm-10">@PortfolioTable1.ModifiedDateTime</dd>
                <dt class="col-sm-2">CreatedDate</dt>
                <dd class="col-sm-10">@PortfolioTable1.CreatedDate</dd>
            </dl>
        </div>
    </div>
}

<div>
    <a href="/portfoliotable1s">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private PortfolioTable1? PortfolioTable1 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        PortfolioTable1 ??= await context.PortfolioTable1.FirstOrDefaultAsync(m => m.Id == Id);
        if (PortfolioTable1 is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdatePortfolioTable1()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(PortfolioTable1!).State = EntityState.Modified;

        try
        {
            PortfolioTable1.ModifiedDateTime = DateTime.Now;
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PortfolioTable1Exists(PortfolioTable1!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/portfoliotable1s");
    }

    private bool PortfolioTable1Exists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.PortfolioTable1.Any(e => e.Id == id);
    }
}
